{"version":3,"sources":["logo.svg","lib/api.js","components/Form.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","api","path","options","fetch","then","resp","json","Form","props","INIT_FORM","start","end","summary","description","location","url","state","form","events","isVisible","setState","e","preventDefault","this","method","headers","body","JSON","stringify","Date","toISOString","toEvent","event","field","value","type","id","name","min","max","onChange","updateFormState","target","onClick","saveEvent","length","React","Component","App","className","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b6868d5e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export default function api(path, options) {\n  // TODO use this when ready for real prod build/test\n  return fetch(`http://localhost:3000${path}`, options)\n    .then(resp => resp.json())\n  // TODO for use when stubbing to test\n  // return Promise.resolve([\n  //   {\n  //       \"start\": \"2020-10-10T15:12:00.000Z\",\n  //       \"end\": \"2020-10-10T16:12:00.000Z\",\n  //       \"summary\": \"Cabin1zz feed booked (Chaz)\",\n  //       \"description\": \"It works ;)\",\n  //       \"location\": \"my room\",\n  //       \"url\": \"http://test-url.com/\",\n  //       \"id\": 1\n  //   }\n  // ])\n}","import React from 'react';\nimport api from '../lib/api'\n\nexport default class Form extends React.Component {\n  INIT_FORM = {\n    start: '2020-10-10',\n    end: '2020-10-11',\n    summary: \"Cabin1 feed booked (Chaz)\",\n    description: \"It works ;)\",\n    location: \"my room\",\n    url: \"http://test-url.com/\",\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      form: this.INIT_FORM,\n      events: [],\n      isVisible: false\n    }\n  }\n\n  componentDidMount() {\n    api('/api/v1/calendars/cabin1/events')\n      .then(({ events }) => {\n        this.setState({\n          events\n        })\n      })\n  }\n\n  saveEvent(e) {\n    e.preventDefault();\n    const { events, form } = this.state;\n    const toEvent = form => ({\n      ...form,\n      start: new Date(form.start).toISOString(),\n      end: new Date(form.end).toISOString()\n    })\n\n    api('/api/v1/calendars/cabin1/events', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(toEvent(form))\n    })\n      .then(({ event }) => {\n        this.setState({\n          events: [...events, event],\n          form: { ...this.INIT_FORM },\n        })\n      })\n  }\n\n  updateFormState(e, field, value) {\n    this.setState({\n      form: {\n        ...this.state.form,\n        [field]: value\n      }\n    });\n  }\n\n  render() {\n    const { events, form } = this.state;\n    return (\n      <div>\n        <form>\n          <div>\n            <span>Start date: </span>\n            <input\n              type=\"date\"\n              id=\"start\"\n              name=\"start-date\"\n              min=\"2020-09-01\"\n              max=\"2020-11-01\"\n              value={form.start}\n              onChange={e => this.updateFormState(e, 'start', e.target.value)}\n            />\n          </div>\n          <div>\n            <span>End date: </span>\n            <input\n              type=\"date\"\n              id=\"end\"\n              name=\"end-date\"\n              min=\"2020-09-01\"\n              max=\"2020-11-01\"\n              value={form.end}\n              onChange={e => this.updateFormState(e, 'end', e.target.value)}\n            />\n          </div>\n          <div>\n            <span>Summary: </span>\n            <input\n              type=\"text\"\n              value={form.summary}\n              onChange={e => this.updateFormState(e, 'summary', e.target.value)}\n            />\n          </div>\n          <div>\n            <span>Description: </span>\n            <input\n              type=\"text\"\n              value={form.description}\n              onChange={e => this.updateFormState(e, 'description', e.target.value)}\n            />\n          </div>\n          <div>\n            <span>Location: </span>\n            <input\n              type=\"text\"\n              value={form.location}\n              onChange={e => this.updateFormState(e, 'location', e.target.value)}\n            />\n          </div>\n          <div>\n            <span>url: </span>\n            <input\n              type=\"text\"\n              value={form.url}\n              onChange={e => this.updateFormState(e, 'url', e.target.value)}\n            />\n          </div>\n          {/* <div>\n            <span>Drink: </span>\n            <select\n              value={form.drink}\n              onChange={e =>this.updateFormState(e, 'drink', e.target.value)}\n            >\n              <option value=\"dew\">Mtn Dew</option>\n              <option value=\"pepsi\">Pepsi</option>\n            </select>\n          </div>\n          <div>\n            <span>Fruits: </span>\n            <select\n              multiple={true}\n              value={form.fruits}\n              onChange={e =>this.updateFormState(e, 'fruits', Array.from(e.target.selectedOptions, (item) => item.value))}\n            >\n              <option value=\"apple\">Apple</option>\n              <option value=\"banana\">Banana</option>\n              <option value=\"cherry\">Cherry</option>\n            </select>\n          </div> */}\n          <button onClick={e => this.saveEvent(e)}>Save event</button>\n        </form>\n        {\n          events.length === 0\n            ? <p>No events to show...</p>\n            : <p>{JSON.stringify(events, null, 2)}</p>\n        }\n      </div>\n    )\n  }\n}","import React from 'react';\nimport Form from './components/Form';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <section>\n        <Form />\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}